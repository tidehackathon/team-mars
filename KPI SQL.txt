File will be later translated to english and all queries properly explained, it's temporary notepad for now

Notatki na później:

W focus area są wyszczegolnione operational domains testow. Można sprawdzić stopień pokrycia deklarowanych w capabilities przez testy


KPI 2+3

select
	name Country_name,
	exercise_cycle,
	count(participant_result) as Sum_Of_All_Participations,
	count(case when participant_result = 'Success' then 1 end) as Success,
	count(case when participant_result = 'Limited Success' then 1 end)as Limited_success,
	count(case when participant_result = 'Pending' then 1 end) as Pending,
	count(case when participant_result = 'Not Tested' then 1 end) as Not_Tested,
	count(case when participant_result = 'Interoperability Issue' then 1 end) as Interoperability_Issue 
		from 
			(select c.id, n.name from capabilities c right join nations n on c.nation_id = n.id ) s1 
		left join 
			test_participants tp on s1.id = tp.capability_id 
		group by name, exercise_cycle
		order by cast(substring(name from 7)as int) asc, right(exercise_cycle, 4) asc

Jak wiele razy capab z każdego z państw brał udział w testach i jaki był rokzład wyników

KPI 2
select
	name Country_name,
	exercise_cycle,
	count(participant_result) as Sum_Of_All_Participations
		from 
			(select c.id, n.name from capabilities c right join nations n on c.nation_id = n.id ) s1 
		left join 
			test_participants tp on s1.id = tp.capability_id 
		group by name, exercise_cycle
		order by cast(substring(name from 7)as int) asc, right(exercise_cycle, 2

Jak wiele razy capab z każdego z państw brał udział w testach

KPI 3

select
	exercise_cycle,
	round(((sum(Success_To_All_Ratio) / count(name))::numeric) *100, 5) as Average_success_rate
		from 
			(select 
				c."name",
				exercise_cycle,
				cast(count(case when participant_result = 'Success' or participant_result = 'Limited Success' then 1 end) as float)/cast(count(participant_result) as float) as Success_To_All_Ratio
					from 
						capabilities c 
					join 
						(select capability_id, participant_result, exercise_cycle from test_participants tp where participant_result = 'Success' or participant_result = 'Limited Success' or participant_result = 'Interoperability Issue') as s1 
					on 
						c.id = s1.capability_id
					group by c."name", exercise_cycle) as s1
	group by exercise_cycle
	order by right(exercise_cycle, 4) asc

Średni succes rate capabilities w danym roku

KPI 6

select
	exercise_cycle,
	dom_count,
	sum(success_to_all_ratio) / count(s1.capability_id) as Averafe_succes_rate_in_domain
		from
		(select 
			capability_id,
			count(operational_domain_id) as dom_count
				from 
					capability_operational_domains cod 
				group by
					capability_id ) s1
		join 
		(select 
			exercise_cycle,
			capability_id,
			cast(count(case when participant_result = 'Success' or participant_result = 'Limited Success' then 1 end) as float)/cast(count(participant_result) as float) as Success_To_All_Ratio
				from 
					capabilities c 
				join 
					(select capability_id, participant_result, exercise_cycle from test_participants tp where participant_result = 'Success' or participant_result = 'Limited Success' or participant_result = 'Interoperability Issue') as s1 
				on 
					c.id = s1.capability_id
				group by exercise_cycle, capability_id) s2
		on
			s1.capability_id = s2.capability_id
	group by exercise_cycle, dom_count 
	order by right(exercise_cycle , 4) asc, dom_count asc

Średni success rate dla capabilities na danej ilości domen

KPI 7

select 	
	s2.perm,
	tp.exercise_cycle,
	count(s2.capability_id)
from
	test_participants tp 
	join
		(select 
			cod.capability_id, 
			string_agg(cod.operational_domain_id::varchar(100), '') as perm
			from
				capability_operational_domains cod 
			group by capability_id
			order by capability_id  asc) as s2
	on
		tp.capability_id = s2.capability_id
group by
	s2.perm, tp.exercise_cycle 
order by
	 perm asc, right(exercise_cycle, 4) asc

Ilość capab biorących udział w testach w danym roku z uwzględnieniem w jakich domenach one działają

KPI 8 var 1

select
	exercise_cycle,
	io_shortfall_ind,
	sum(s2.cou) / count(s2.cou) as Average_domain_complexity
from
	(select 
		t.exercise_cycle,
		t.id,
		capability_id,
		t.io_shortfall_ind 
	from 
		testcases t 
	join
		test_participants tp 
	on
		t.id = tp.testcase_id 
	order by t.id asc) s1
join
	(select 
		capability_id,
		count(operational_domain_id) as cou
	from capability_operational_domains cod 
	group by capability_id 
	order by 1 asc) s2
on
	s1.capability_id = s2.capability_id
group by exercise_cycle, io_shortfall_ind
order by right(exercise_cycle, 4)

Średnia interoperacyjność domenowa capab biorących udział w testach zakończonych znalezieniem błędów w standardach w porównaniu z tymi które nie znalazły

KPI 9

select
	exercise_cycle, fa."name", success, limited_success, pending, not_tested, interoperability_issue
from
	focus_areas fa 
join
	(select
		s1.exercise_cycle,
		focus_area_id,
		count(case when s1.overall_result = 'Success' then 1 end) as Success,
		count(case when s1.overall_result = 'Limited Success' then 1 end) as Limited_success,
		count(case when s1.overall_result = 'Pending' then 1 end) as Pending,
		count(case when s1.overall_result = 'Not Tested' then 1 end) as Not_Tested,
		count(case when s1.overall_result = 'Interoperability Issue' then 1 end) as Interoperability_Issue
	from
		objectives o 
	join
		(select
			t.exercise_cycle,
			t.id,
			to2.objective_id,
			t.overall_result 
		from 
			testcases t 
		join
			test_objectives to2 
		on
			t.id = to2.testcase_id ) s1
	on 
		o.id = s1.objective_id
	group by 
		s1.exercise_cycle, focus_area_id
	order by 
		focus_area_id  asc) s1
on
	fa.id = s1.focus_area_id
order by 
	right(exercise_cycle, 4), 2

Podaje ilość objectiv dla każdej focus area z podziałem na wyniki testów i wyliczonym stosunkiem porażek do suukcesów

KPI 10

select
	t.exercise_cycle, 
	was_validating,
	t.io_shortfall_ind standard_shortdall,
	count(t.id)
from 
	testcases t 
join
	(select 
		testcase_id,
		sum(case when task_id = 9 then 1 else 0 end) > 0 was_validating
	from
		capability_tasks ct 
	join
		test_participants tp 
	on
		ct.capability_id = tp.capability_id
	group by testcase_id) s1
on s1.testcase_id = t.id
group by t.exercise_cycle, was_validating, t.io_shortfall_ind
order by 1, 2, 3

Pokazuje ile problemów ze standardami zostało wykryte przez te testy w których przynajmniej jedno capability miało funkcję walidacji standardu (nie jestem pewien
czy to działa tak jak my zakładaliśmy, tzn. czy to standard validation faktycznie sprawdza standard)

KPI 11

//----------BEGIN-------------Test only, not implement------------BEGIN--------------//

select	
	s1.name Country_name,
	count(s1.id)::float/6, as Straight_average
	count(case when s2.name = 'Air' then 1 end) as Air_avg_diff,
	count(case when s2.name = 'Land' then 1 end) as Land_avg_diff,
	count(case when s2.name = 'Maritime' then 1 end) as Maritime_avg_diff,
	count(case when s2.name = 'Cyberspace' then 1 end) as Cyberspace_avg_diff,
	count(case when s2.name = 'Space' then 1 end) as Space_avg_diff,
	count(case when s2.name = 'Other Support Services' then 1 end) as Other_Support_Services_avg_diff
from 
	(select 
		n."name",
		c.id 
	from
		capabilities c 
	join
		nations n 
	on
		c.nation_id = n.id) s1
join 
	(select
		cod.capability_id, 
		od."name"
	from 
		operational_domains od 
	join
		capability_operational_domains cod 
	on
		od.id = cod.operational_domain_id) s2
on
	s1.id = s2.capability_id
group by
	s1.name
order by
	substring(s1.name, 7)::int, 2

//----------END-------------Test only, not implement------------END--------------//
	
select
	ec,
	country_name,
	(sqrt(power(Air_avg_diff, 2) + power(Land_avg_diff, 2) + power(Maritime_avg_diff, 2) + power(Cyberspace_avg_diff, 2) + power(Space_avg_diff, 2) + power(Other_Support_Services_avg_diff, 2)))/straight_average as Specialization_indicator,
	Air_avg_diff,
	Land_avg_diff,
	Maritime_avg_diff,
	Cyberspace_avg_diff,
	Space_avg_diff,
	Other_Support_Services_avg_diff
from
	(select	
		s1.name Country_name,
		exercise_cycle ec,
		count(s1.id)::float/6 as Straight_average,
		count(case when s2.name = 'Air' then 1 end) - count(s1.id)::float/6 as Air_avg_diff,
		count(case when s2.name = 'Land' then 1 end) - count(s1.id)::float/6 as Land_avg_diff,
		count(case when s2.name = 'Maritime' then 1 end) - count(s1.id)::float/6 as Maritime_avg_diff,
		count(case when s2.name = 'Cyberspace' then 1 end) - count(s1.id)::float/6 as Cyberspace_avg_diff,
		count(case when s2.name = 'Space' then 1 end) - count(s1.id)::float/6 as Space_avg_diff,
		count(case when s2.name = 'Other Support Services' then 1 end) - count(s1.id)::float/6 as Other_Support_Services_avg_diff
	from 
		(select
			tp2.exercise_cycle,
			s1.name,
			s1.id
		from
			(select 
				n."name",
				c.id 
			from
				capabilities c 
			join
				nations n 
			on
				c.nation_id = n.id) s1
		join
			(select 
				distinct exercise_cycle, tp.capability_id 
			from 
				test_participants tp) tp2  
		on
			s1.id = tp2.capability_id) s1
	join 
		(select
			cod.capability_id, 
			od."name"
		from 
			operational_domains od 
		join
			capability_operational_domains cod 
		on
			od.id = cod.operational_domain_id) s2
	on
		s1.id = s2.capability_id
	group by
		s1.name, exercise_cycle
	order by
		substring(s1.name, 7)::int, right(exercise_cycle, 4)) s1

Wylicza stosunek średniokwadratowego pierwiastka błędu do prostej średniej (współczynnik specjalizacji) Im bliżej zera typ bardziej zrównoważony rozkład domen krytych
przez capabilities danego państwa (Im bliższy zera tym lepiej, daje kiepskie wyniki dla małej ilości danych)

KPI 12

select 
	exercise_cycle,
	s1.number_of_warfare_levels,
	count(case when participant_result = 'Interoperability Issue' then 1 end)::float / count(tp.capability_id) as Issue_to_all_test_ratio
from 
	(select 
		cw.capability_id,
		count(wl.name) number_of_warfare_levels
	from
		warfare_levels wl 
	join
		capability_warfarelevels cw 
	on
		cw.warfarelevel_id = wl.id
	group by 
		cw.capability_id) s1
join 
	test_participants tp 
on
	s1.capability_id = tp.capability_id
where 
	tp.participant_result != 'Pending' and tp.participant_result != 'Not Tested'
group by 
	exercise_cycle, s1.number_of_warfare_levels
order by 
	right(exercise_cycle, 4), 2

Wylicza stosunek błędnych testów do wszystkich dla capabilities w zależności od obsługiwanych poziomów wojny